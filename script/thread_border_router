#!/bin/bash
#
#  Copyright (c) 2017, Nordic Semiconductor
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#
# @note This file configures Border Router for Thread Network.
#

###############################################################################
# Read configuration file.
###############################################################################

source ./config/thread_border_router.config

###############################################################################
# Init Border Router UART NCP transport.
###############################################################################

init_uart_ncp_transport() {
	stty -F $ncp_interface 115200 cread crtscts

	# Temporary workaround for the Segger JLink driver issue
	# echo 0 > /sys/devices/platform/soc/3f980000.usb/buspower
	# echo 1 > /sys/devices/platform/soc/3f980000.usb/buspower
}

###############################################################################
# Remove old instance of Tayga NAT64.
###############################################################################

clean_nat64() {
	rm -r /var/spool/tayga
	mkdir -p /var/spool/tayga/
	touch /var/spool/tayga/dynamic.map
	ip link del dev nat64
}

###############################################################################
# Configure Tayga NAT64.
###############################################################################

init_nat64() {
	# kill this guy so it doesn't error out
	sudo killall tayga

	# clean old
	clean_nat64

	prefix_nat96=$prefix_nat64"/96"

	sed -i "/^prefix/s,.*,prefix $prefix_nat96," /etc/tayga.conf

	# delete first
	sudo ip link del dev nat64

	# then create new
	tayga --mktun
	ip link set nat64 up
	sleep 3

	# Assigns an ipv4 addr to the TAYGA interface, used for returning icmp errors
	ip addr add 192.168.255.1 dev nat64

	# Assigns an ipv6 addr to the TAYGA interface, used for returning icmp errors
	ip addr add $prefix_nat48"1" dev nat64
	# ip addr add $prefix_nat48"/64" dev nat64

	# this will prevent pings on the server side using the ipv6 interface
	# but, it's necessary in order for DNS to work properly
	ip addr add $prefix_nat64"1" dev nat64

	ip route add 192.168.255.0/24 dev nat64
	ip route add $prefix_nat96 dev nat64

	# Make sure this is set. Otherwise no bueno!
	sudo sed -i 's/^RUN="no"/RUN="yes"/' '/etc/default/tayga'
}

###############################################################################
# Init DNS64 server.
###############################################################################

init_dns64() {
	dns64_server=$prefix_nat64"1/128"

	sed -i "/dns64/s,.*,	dns64 $prefix_nat96 {," /etc/bind/named.conf.options
	sed -i "/allow-query-on/s,.*,	allow-query-on { $dns64_server; };," /etc/bind/named.conf.options

	# /etc/init.d/bind9 stop

	# echo "domain example.local" > /etc/resolv.conf
	# echo "nameserver 127.0.0.1" >> /etc/resolv.conf

	/etc/init.d/bind9 reload
	/etc/init.d/bind9 start
}

###############################################################################
# Manage IPv6 global addresses.
###############################################################################

assign_global_ipv6_addrs() {
	list_wan_addresses=`ip -6 route | sed -e "s/^.*from \([^ ]*\).*$/\1/;t;d" | grep ^2`
	for addr in $list_wan_addresses
	do
		prefix_len=`echo $addr | cut -d"/" -f2`
		if [ $prefix_len -lt 63 ]
		then
			global_addr=`echo $addr | cut -d"/" -f1`
			prefix=`/usr/bin/python ./script/create_subnet64.py $global_addr`
			sleep 1
			wpanctl config-gateway $prefix -d
		fi
	done
}

###############################################################################
# Manage NAT64 addresses.
###############################################################################

assign_nat64_addrs() {
	sleep 1
	wpanctl config-gateway $prefix_ula -d
	sleep 2
	wpanctl add-route $prefix_nat64
}

###############################################################################
# Prepare network environment.
###############################################################################

prepare_network() {
	# Enable ipfowarding
	echo 1 > /proc/sys/net/ipv4/conf/all/forwarding
	echo 1 > /proc/sys/net/ipv6/conf/all/forwarding
	echo 0 > /proc/sys/net/ipv6/conf/eth0/forwarding

	# Clear the iptables
	iptables -F
	iptables -t nat -F

	# Set NAT to go through eth0
	iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

	# Start the tayga service
	tayga &
	sleep 3
}

prepare_config() {
	# One time needed only

	# Set the com port
	if ! grep -q "Config:NCP:SocketPath \"$ncp_interface\"" /etc/wpantund.conf
	then
	sudo sed -i "/Config:NCP:SocketPath \"\/dev/i Config:NCP:SocketPath \"$ncp_interface\"" /etc/wpantund.conf
	fi

	# Drop privleges -- this will prevent wpan0 from being created...
	# sudo sed -i 's/^#Config:Daemon:PrivDropToUser/Config:Daemon:PrivDropToUser/' /etc/wpantund.conf

}

###############################################################################
# Run Border Router Service.
###############################################################################

run() {
	killall wpantund 2>/dev/null
	sleep 2

	# Run the daemon
	wpantund &
	sleep 2

	# Reset NCP to a working state
	wpanctl reset
	sleep 3

	# Set all the network parameters. Usually just set default.
	wpanctl set Network:Key --data $thread_network_key
	wpanctl set NCP:Channel $thread_channel
	wpanctl setprop Network:PANID $thread_panid
	wpanctl attach
	sleep 5

	timeout=10


	# Wait until we're associated
	while [ `wpanctl getprop NCP:State | cut -d "\"" -f2` != "associated" ] && [ $? -eq 0 ] && [ $timeout -gt 0 ]
	do
		timeout=$((timeout-1))
		sleep 2
	done
}

###############################################################################
# Main  script
###############################################################################

init_uart_ncp_transport
init_nat64
init_dns64
prepare_network
prepare_config

while true
do
	commissioner_started=0
	run

	while [ `wpanctl getprop NCP:State | cut -d "\"" -f2` = "associated" ] && [ $? -eq 0 ]
	do
		assign_nat64_addrs
		sleep 2
		assign_global_ipv6_addrs
	sleep 15
	done
done
